import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key}" in client code.`);
        }
      }
    }));
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/geolocation/node_modules/debug/debug.js
var require_debug = __commonJS({
  "node_modules/geolocation/node_modules/debug/debug.js"(exports, module) {
    module.exports = debug;
    function debug(name) {
      if (!debug.enabled(name))
        return function() {
        };
      return function(fmt) {
        fmt = coerce(fmt);
        var curr = new Date();
        var ms = curr - (debug[name] || curr);
        debug[name] = curr;
        fmt = name + " " + fmt + " +" + debug.humanize(ms);
        window.console && console.log && Function.prototype.apply.call(console.log, console, arguments);
      };
    }
    debug.names = [];
    debug.skips = [];
    debug.enable = function(name) {
      try {
        localStorage.debug = name;
      } catch (e) {
      }
      var split = (name || "").split(/[\s,]+/), len = split.length;
      for (var i = 0; i < len; i++) {
        name = split[i].replace("*", ".*?");
        if (name[0] === "-") {
          debug.skips.push(new RegExp("^" + name.substr(1) + "$"));
        } else {
          debug.names.push(new RegExp("^" + name + "$"));
        }
      }
    };
    debug.disable = function() {
      debug.enable("");
    };
    debug.humanize = function(ms) {
      var sec = 1e3, min = 60 * 1e3, hour = 60 * min;
      if (ms >= hour)
        return (ms / hour).toFixed(1) + "h";
      if (ms >= min)
        return (ms / min).toFixed(1) + "m";
      if (ms >= sec)
        return (ms / sec | 0) + "s";
      return ms + "ms";
    };
    debug.enabled = function(name) {
      for (var i = 0, len = debug.skips.length; i < len; i++) {
        if (debug.skips[i].test(name)) {
          return false;
        }
      }
      for (var i = 0, len = debug.names.length; i < len; i++) {
        if (debug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    };
    function coerce(val) {
      if (val instanceof Error)
        return val.stack || val.message;
      return val;
    }
    try {
      if (window.localStorage)
        debug.enable(localStorage.debug);
    } catch (e) {
    }
  }
});

// node_modules/geolocation/index.js
var require_geolocation = __commonJS({
  "node_modules/geolocation/index.js"(exports, module) {
    var EventEmitter = require_events().EventEmitter;
    var inherits = require_inherits_browser();
    var debug = require_debug()("geolocation");
    var currentPosition;
    var watchers = 0;
    var watcherHandle;
    var emitter = new EventEmitter();
    emitter.setMaxListeners(0);
    module.exports = exports = emitter;
    exports.options = {};
    exports.getCurrentPosition = function(callback) {
      if (watchers) {
        if (currentPosition) {
          debug("get current location - cache hit");
          process.nextTick(function() {
            callback(null, currentPosition);
          });
        } else {
          let changeListener2 = function(position) {
            emitter.removeListener("error", errorListener2);
            callback(null, position);
          }, errorListener2 = function(error) {
            emitter.removeListener("change", changeListener2);
            callback(error);
          };
          var changeListener = changeListener2, errorListener = errorListener2;
          debug("get current location - cache fetching");
          emitter.once("change", changeListener2);
          emitter.once("error", errorListener2);
        }
        return;
      }
      debug("get current location - cache miss");
      navigator.geolocation.getCurrentPosition(function(position) {
        callback(null, position);
      }, function(error) {
        callback(error);
      }, exports.options);
    };
    exports.createWatcher = function(callback) {
      var watcher = new Watcher();
      if (callback) {
        watcher.on("change", callback);
      }
      watcher.start();
      return watcher;
    };
    function Watcher() {
      EventEmitter.call(this);
      this.watching = false;
      var self = this;
      this.changeHandler = function(position) {
        self.emit("change", position);
      };
    }
    inherits(Watcher, EventEmitter);
    exports.Watcher = Watcher;
    Watcher.prototype.start = function() {
      if (this.watching)
        return;
      this.watching = true;
      watchers++;
      debug("start watcher");
      emitter.on("change", this.changeHandler);
      if (watchers === 1) {
        debug("start geolocation watch position");
        watcherHandle = navigator.geolocation.watchPosition(function(position) {
          currentPosition = position;
          emitter.emit("change", position);
        }, function(error) {
          emitter.emit("error", error);
        }, this.options);
      }
    };
    Watcher.prototype.stop = function() {
      if (!this.watching)
        return;
      this.watching = false;
      watchers--;
      emitter.removeListener("change", this.changeHandler);
      if (!watchers) {
        debug("clear geolocation watch");
        navigator.geolocation.clearWatch(watcherHandle);
      }
    };
  }
});
export default require_geolocation();
//# sourceMappingURL=geolocation.js.map
